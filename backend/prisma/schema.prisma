// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  trainer
  client
  admin
}

// Core Users table
model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @unique @db.VarChar(255)
  passwordHash String?   @map("password_hash") @db.VarChar(255)
  role         Role
  isActive     Boolean   @default(true) @map("is_active")
  isVerified   Boolean   @default(false) @map("is_verified")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  lastLoginAt  DateTime? @map("last_login_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  twoFactorAuth      TwoFactorAuth?
  userSessions       UserSession[]
  oauthAccounts      OAuthAccount[]
  securityAuditLogs  SecurityAuditLog[]
  accountLockouts    AccountLockout[]
  apiTokens          ApiToken[]

  @@map("users")
}

// Email verification tokens
model EmailVerification {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  token      String    @unique @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at")
  verifiedAt DateTime? @map("verified_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Password reset tokens
model PasswordReset {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// Two-factor authentication
model TwoFactorAuth {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @unique @map("user_id") @db.Uuid
  secret      String?   @db.VarChar(255)
  backupCodes String[]  @map("backup_codes")
  isEnabled   Boolean   @default(false) @map("is_enabled")
  enabledAt   DateTime? @map("enabled_at")
  lastUsedAt  DateTime? @map("last_used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// User sessions for JWT management
model UserSession {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  tokenHash        String    @unique @map("token_hash") @db.VarChar(255)
  deviceInfo       Json?     @map("device_info") @db.JsonB
  ipAddress        String?   @map("ip_address") @db.Inet
  expiresAt        DateTime  @map("expires_at")
  lastActivityAt   DateTime? @map("last_activity_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// OAuth social login accounts
model OAuthAccount {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  provider         String    @db.VarChar(50) // google, apple, facebook
  providerUserId   String    @map("provider_user_id") @db.VarChar(255)
  accessToken      String?   @map("access_token") @db.Text
  refreshToken     String?   @map("refresh_token") @db.Text
  tokenExpiresAt   DateTime? @map("token_expires_at")
  profileData      Json?     @map("profile_data") @db.JsonB
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("oauth_accounts")
}

// Security audit logs
model SecurityAuditLog {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?   @map("user_id") @db.Uuid
  eventType     String    @map("event_type") @db.VarChar(50) // login, logout, password_change, etc.
  ipAddress     String?   @map("ip_address") @db.Inet
  userAgent     String?   @map("user_agent") @db.Text
  deviceInfo    Json?     @map("device_info") @db.JsonB
  success       Boolean
  failureReason String?   @map("failure_reason") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_audit_logs")
}

// Account lockout protection
model AccountLockout {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  lockedUntil    DateTime? @map("locked_until")
  failedAttempts Int       @default(0) @map("failed_attempts")
  lastAttemptAt  DateTime? @map("last_attempt_at")
  unlockedAt     DateTime? @map("unlocked_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_lockouts")
}

// API tokens for future use
model ApiToken {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String    @db.VarChar(255)
  tokenHash   String    @unique @map("token_hash") @db.VarChar(255)
  permissions String[]
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_tokens")
}